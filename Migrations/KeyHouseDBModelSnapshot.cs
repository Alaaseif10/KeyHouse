// <auto-generated />
using System;
using KeyHouse.container;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KeyHouse.Migrations
{
    [DbContext(typeof(KeyHouseDB))]
    partial class KeyHouseDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BenefitsServicesUsers", b =>
                {
                    b.Property<int>("BenefitsServicesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("BenefitsServicesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("BenefitsServicesUsers");
                });

            modelBuilder.Entity("KeyHouse.Models.Entities.Agencies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Agency_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Agency_Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Agency_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Agency_Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Agency_Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Agency_Status")
                        .HasColumnType("int");

                    b.Property<int>("NumCompany")
                        .HasColumnType("int");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.Property<string>("logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("KeyHouse.Models.Entities.BenefitsServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BenefitsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BenefitsServices");
                });

            modelBuilder.Entity("KeyHouse.Models.Entities.Blocks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Block_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CitiesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CitiesId");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("KeyHouse.Models.Entities.Cities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GovernmentsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GovernmentsId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("KeyHouse.Models.Entities.Contracts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgenciesId")
                        .HasColumnType("int");

                    b.Property<string>("Contract_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start_date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AgenciesId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("KeyHouse.Models.Entities.Governments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Government_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Governments");
                });

            modelBuilder.Entity("KeyHouse.Models.Entities.Images", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Img_Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnitsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnitsId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("KeyHouse.Models.Entities.Interest", b =>
                {
                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.Property<int>("UnitsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Interest_AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SuccessfulContact")
                        .HasColumnType("bit");

                    b.HasKey("UsersId", "UnitsId");

                    b.HasIndex("UnitsId");

                    b.ToTable("Interest");
                });

            modelBuilder.Entity("KeyHouse.Models.Entities.Units", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Added_Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AgenciesId")
                        .HasColumnType("int");

                    b.Property<int>("Area")
                        .HasColumnType("int");

                    b.Property<int?>("BlocksId")
                        .HasColumnType("int");

                    b.Property<bool>("Furnishing")
                        .HasColumnType("bit");

                    b.Property<int>("Num_Bathrooms")
                        .HasColumnType("int");

                    b.Property<int>("Num_Rooms")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Under_constracting_Status")
                        .HasColumnType("int");

                    b.Property<string>("Unit_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit_Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgenciesId");

                    b.HasIndex("BlocksId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("KeyHouse.Models.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Creation_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Uesr_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("User_Type")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BenefitsServicesUsers", b =>
                {
                    b.HasOne("KeyHouse.Models.Entities.BenefitsServices", null)
                        .WithMany()
                        .HasForeignKey("BenefitsServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KeyHouse.Models.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KeyHouse.Models.Entities.Agencies", b =>
                {
                    b.HasOne("KeyHouse.Models.Entities.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("KeyHouse.Models.Entities.Blocks", b =>
                {
                    b.HasOne("KeyHouse.Models.Entities.Cities", "Cities")
                        .WithMany("Blocks")
                        .HasForeignKey("CitiesId");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("KeyHouse.Models.Entities.Cities", b =>
                {
                    b.HasOne("KeyHouse.Models.Entities.Governments", "Governments")
                        .WithMany("Cities")
                        .HasForeignKey("GovernmentsId");

                    b.Navigation("Governments");
                });

            modelBuilder.Entity("KeyHouse.Models.Entities.Contracts", b =>
                {
                    b.HasOne("KeyHouse.Models.Entities.Agencies", "Agencies")
                        .WithMany("Contracts")
                        .HasForeignKey("AgenciesId");

                    b.Navigation("Agencies");
                });

            modelBuilder.Entity("KeyHouse.Models.Entities.Images", b =>
                {
                    b.HasOne("KeyHouse.Models.Entities.Units", "Units")
                        .WithMany("Images")
                        .HasForeignKey("UnitsId");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("KeyHouse.Models.Entities.Interest", b =>
                {
                    b.HasOne("KeyHouse.Models.Entities.Units", "Units")
                        .WithMany("Interests")
                        .HasForeignKey("UnitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KeyHouse.Models.Entities.Users", "Users")
                        .WithMany("Interests")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Units");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("KeyHouse.Models.Entities.Units", b =>
                {
                    b.HasOne("KeyHouse.Models.Entities.Agencies", "Agencies")
                        .WithMany("Units")
                        .HasForeignKey("AgenciesId");

                    b.HasOne("KeyHouse.Models.Entities.Blocks", "Blocks")
                        .WithMany()
                        .HasForeignKey("BlocksId");

                    b.Navigation("Agencies");

                    b.Navigation("Blocks");
                });

            modelBuilder.Entity("KeyHouse.Models.Entities.Agencies", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("KeyHouse.Models.Entities.Cities", b =>
                {
                    b.Navigation("Blocks");
                });

            modelBuilder.Entity("KeyHouse.Models.Entities.Governments", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("KeyHouse.Models.Entities.Units", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Interests");
                });

            modelBuilder.Entity("KeyHouse.Models.Entities.Users", b =>
                {
                    b.Navigation("Interests");
                });
#pragma warning restore 612, 618
        }
    }
}
